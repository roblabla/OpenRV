name: OpenRV Build
on: [push, pull_request]

env:
  RV_CMAKE_BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: macos-latest
            target: RV
          - os: windows-latest
            target: rv
          - os: ubuntu-latest
            target: rv
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
      #- name: Install linux dependencies
      #  if: ${{ matrix.os == 'ubuntu-latest' }}
      #  run: |
      #    yum install -y sudo wget git ca-certificates
      #    sudo yum install -y centos-release-scl
      #    sudo yum-config-manager --enable rhel-server-rhscl-7-rpms
      #    sudo yum install -y devtoolset-9

      #    # Note that you have to activate this all of the time (or add it to shell user initialization (e.g.: .bashrc))
      #    scl enable devtoolset-9 $SHELL

      #    sudo yum install -y alsa-lib-devel autoconf automake avahi-compat-libdns_sd-devel bison bzip2-devel cmake-gui curl-devel flex glew-devel libXcomposite libXi-devel libaio-devel libffi-devel libncurses-devel libtool libxkbcommon openssl-devel pulseaudio-libs pulseaudio-libs-glib2 ocl-icd opencl-headers python3 python3-devel qt5-qtbase-devel readline-devel sqlite-devel tcl-devel tk-devel yasm zlib-devel

      #    wget https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/nasm-2.15.05.tar.gz
      #    tar xf nasm-2.15.05.tar.gz
      #    cd nasm-2.15.05
      #    scl enable devtoolset-9 "$SHELL -c './configure'"
      #    scl enable devtoolset-9 "$SHELL -c 'make -j'"
      #    sudo make install
    - name: Install linux dependencies
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo apt-get update
        sudo apt-get install -y ocl-icd-opencl-dev libgl1-mesa-dev libglu1-mesa-dev meson nasm libavahi-compat-libdnssd-dev
    - name: Install macOS dependencies
      if: ${{ matrix.os == 'macos-latest' }}
      run: brew install cmake ninja readline sqlite3 xz zlib tcl-tk autoconf automake libtool python yasm clang-format black meson nasm pkg-config glew
    - name: Install Windows dependencies
      if: ${{ matrix.os == 'windows-latest' }}
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          mingw-w64-x86_64-autotools
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-glew
          mingw-w64-x86_64-libarchive
          mingw-w64-x86_64-make
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-python-pip
          mingw-w64-x86_64-python-psutil
          mingw-w64-x86_64-toolchain
          bison
          flex
          git
          nasm
          p7zip
          unzip
          zip
    - uses: lukka/get-cmake@latest
      if: ${{ matrix.os == 'ubuntu-latest' }}
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        modules: 'qtwebengine'
        install-deps: false
    - name: Install python dependencies
      run: python3 -m pip install -r requirements.txt
    - name: Configure CMake
      if: ${{ matrix.os == 'windows-latest'  }}
      shell: msys2 {0}
      run: cmake -B ${{github.workspace}}/build -G Ninja -DCMAKE_BUILD_TYPE=${{env.RV_CMAKE_BUILD_TYPE}} -DRV_DEPS_QT5_LOCATION="$Qt5_DIR" -DRV_DEPS_WIN_PERL_ROOT="/c/Strawberry/perl/bin"
    - name: Configure CMake
      if: ${{ matrix.os != 'windows-latest'  }}
      run: cmake -B ${{github.workspace}}/build -G Ninja -DCMAKE_BUILD_TYPE=${{env.RV_CMAKE_BUILD_TYPE}} -DRV_DEPS_QT5_LOCATION="$Qt5_DIR"
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.RV_CMAKE_BUILD_TYPE}} --target ${{matrix.target}}
    - uses: actions/upload-artifact@v3
      with:
        name: RV
        path: ${{github.workspace}}/build/stage/app/
